package dtn

import io.bullet.borer.{AdtEncodingStrategy, Decoder, Encoder, Codec}
import io.bullet.borer.derivation.MapBasedCodecs.*


given AdtEncodingStrategy = AdtEncodingStrategy.flat(typeMemberName = "type")


enum PeerAddress:  // encoding/decoding special map-based, e.g. {"Ip":"192.168.217.128"}  // idk about the others, just guessing in decoder/encoder
  case Ip(address: String)
  case BroadcastGeneric(domain: String, address: String)
  case Generic(address: String)

enum Constraint derives Codec:  // encoding/decoding only the enum name, e.g. "DispatchPending"
  case DispatchPending
  case ForwardPending
  case ReassemblyPending
  case Contraindicated
  case LocalEndpoint
  case Deleted

enum PeerType derives Codec:  // encoding/decoding only the enum name, e.g. "Static"
  case Static
  case Dynamic


case class DtnPeer(eid: Endpoint, addr: PeerAddress, con_type: PeerType, period: Option[Int], cla_list: List[Tuple2[String, Option[Int]]], services: Map[Int, String], last_contact: Int, fails: Int) derives Codec // encoding/decoding special map-based with all fields but no type, e.g. {"eid": ..., "addr": ...}

case class BundlePack(source: Endpoint, destination: Endpoint, received_time: Long, creation_time: Long, lifetime: Long, id: String, administrative: Boolean, size: Int, constraints: List[Constraint]) derives Codec  // encoding/decoding special map-based with all fields but no type, e.g. {"source": ..., "destination": ...}

case class Sender(remote: PeerAddress, port: Option[Int], agent: String, next_hop: Endpoint) derives Codec // encoding/decoding special map-based with all fields but no type, e.g. {"remote": ..., "port": ...}


enum Packet derives Codec.All:  // encoding/decoding of all packets done with flat map-based encoding, where class is encoding with "type" field, e.g. {"type": "Error", "reason": "some error reason"}
  // packets sent from dtnd
  case RequestSenderForBundle(clas: List[String], bp: BundlePack)
  case Error(reason: String)
  case Timeout(bp: BundlePack)
  case SendingFailed(bid: String, cla_sender: String)
  case SendingSucceeded(bid: String, cla_sender: String)
  case IncomingBundle(bndl: Bundle)
/* 
{"type":"IncomingBundle","bndl":[[7,4,0,[1,"//global/~crdt/app1"],[1,"//global/~crdt/app1"],[1,0],[765980855859,0],86400000],[10,2,0,0,[130,24,32,0]],[1,1,0,0,[123,34,110,117,109,98,101,114,34,58,48,44,34,112,97,121,108,111,97,100,34,58,123,34,100,97,116,97,34,58,123,34,111,114,100,101,114,34,58,123,34,99,111,117,110,116,101,114,34,58,48,44,34,118,97,108,117,101,34,58,123,34,105,110,110,101,114,34,58,91,91,123,34,116,121,112,101,34,58,34,69,108,101,109,34,44,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,50,52,50,57,49,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,56,55,50,53,51,55,50,54,50,49,56,51,48,57,50,51,54,54,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,54,52,76,102,101,52,106,67,34,44,34,116,105,109,101,34,58,49,125,125,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,50,48,50,57,57,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,56,55,50,53,51,55,50,54,50,49,56,51,48,57,50,51,54,52,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,54,52,76,102,101,52,106,67,34,44,34,116,105,109,101,34,58,48,125,125,125,93,44,91,123,34,116,121,112,101,34,58,34,69,108,101,109,34,44,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,56,52,51,51,54,49,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,53,56,48,54,54,56,52,54,56,53,54,49,50,49,49,51,52,49,51,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,79,43,71,54,119,112,74,108,34,44,34,116,105,109,101,34,58,49,125,125,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,56,51,53,49,54,51,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,54,52,54,52,51,49,51,50,52,55,49,56,48,51,51,51,50,50,54,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,48,105,107,57,110,66,78,116,34,44,34,116,105,109,101,34,58,48,125,125,125,93,44,91,123,34,116,121,112,101,34,58,34,69,108,101,109,34,44,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,56,51,53,49,54,51,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,54,52,54,52,51,49,51,50,52,55,49,56,48,51,51,51,50,50,54,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,48,105,107,57,110,66,78,116,34,44,34,116,105,109,101,34,58,48,125,125,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,54,56,55,52,49,56,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,53,56,48,54,54,56,52,54,56,53,54,49,50,49,49,51,52,49,49,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,79,43,71,54,119,112,74,108,34,44,34,116,105,109,101,34,58,48,125,125,125,93,44,91,123,34,116,121,112,101,34,58,34,69,108,101,109,34,44,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,49,51,49,48,53,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,45,57,49,56,55,53,49,51,55,48,55,51,51,48,56,55,56,48,53,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,89,113,73,77,78,112,80,84,34,44,34,116,105,109,101,34,58,48,125,125,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,56,52,51,51,54,49,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,53,56,48,54,54,56,52,54,56,53,54,49,50,49,49,51,52,49,51,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,79,43,71,54,119,112,74,108,34,44,34,116,105,109,101,34,58,49,125,125,125,93,44,91,123,34,116,121,112,101,34,58,34,69,108,101,109,34,44,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,50,48,50,57,57,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,56,55,50,53,51,55,50,54,50,49,56,51,48,57,50,51,54,52,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,54,52,76,102,101,52,106,67,34,44,34,116,105,109,101,34,58,48,125,125,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,49,51,49,48,53,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,45,57,49,56,55,53,49,51,55,48,55,51,51,48,56,55,56,48,53,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,89,113,73,77,78,112,80,84,34,44,34,116,105,109,101,34,58,48,125,125,125,93,44,91,123,34,116,121,112,101,34,58,34,72,101,97,100,34,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,54,54,53,54,53,53,56,52,52,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,45,55,53,55,51,52,50,50,51,55,55,56,50,48,53,56,56,54,49,56,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,77,55,90,79,71,121,98,67,34,44,34,116,105,109,101,34,58,48,125,125,125,93,44,91,123,34,116,121,112,101,34,58,34,69,108,101,109,34,44,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,54,54,53,54,53,53,56,52,52,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,45,55,53,55,51,52,50,50,51,55,55,56,50,48,53,56,56,54,49,56,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,77,55,90,79,71,121,98,67,34,44,34,116,105,109,101,34,58,48,125,125,125,44,123,34,118,97,108,117,101,34,58,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,50,52,50,57,49,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,56,55,50,53,51,55,50,54,50,49,56,51,48,57,50,51,54,54,125,44,34,112,97,121,108,111,97,100,34,58,123,34,112,108,97,99,101,34,58,34,54,52,76,102,101,52,106,67,34,44,34,116,105,109,101,34,58,49,125,125,125,93,93,125,125,44,34,109,101,116,97,34,58,91,91,123,34,112,108,97,99,101,34,58,34,48,105,107,57,110,66,78,116,34,44,34,116,105,109,101,34,58,48,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,56,51,53,49,54,51,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,54,52,54,52,51,49,51,50,52,55,49,56,48,51,51,51,50,50,55,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,76,117,107,97,115,34,44,34,109,101,115,115,97,103,101,34,58,34,72,97,108,108,111,34,125,125,93,44,91,123,34,112,108,97,99,101,34,58,34,54,52,76,102,101,52,106,67,34,44,34,116,105,109,101,34,58,49,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,50,52,50,57,49,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,56,55,50,53,51,55,50,54,50,49,56,51,48,57,50,51,54,55,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,66,111,114,105,115,34,44,34,109,101,115,115,97,103,101,34,58,34,119,97,115,32,101,105,110,32,116,111,108,108,101,114,32,116,97,103,34,125,125,93,44,91,123,34,112,108,97,99,101,34,58,34,89,113,73,77,78,112,80,84,34,44,34,116,105,109,101,34,58,48,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,49,51,49,48,53,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,45,57,49,56,55,53,49,51,55,48,55,51,51,48,56,55,56,48,52,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,76,117,107,97,115,34,44,34,109,101,115,115,97,103,101,34,58,34,72,101,121,34,125,125,93,44,91,123,34,112,108,97,99,101,34,58,34,77,55,90,79,71,121,98,67,34,44,34,116,105,109,101,34,58,48,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,54,54,53,54,53,53,56,52,52,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,45,55,53,55,51,52,50,50,51,55,55,56,50,48,53,56,56,54,49,55,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,66,111,114,105,115,34,44,34,109,101,115,115,97,103,101,34,58,34,104,97,108,108,111,34,125,125,93,44,91,123,34,112,108,97,99,101,34,58,34,79,43,71,54,119,112,74,108,34,44,34,116,105,109,101,34,58,49,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,56,52,51,51,54,49,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,53,56,48,54,54,56,52,54,56,53,54,49,50,49,49,51,52,49,52,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,66,111,114,105,115,34,44,34,109,101,115,115,97,103,101,34,58,34,119,105,111,101,32,103,101,116,115,34,125,125,93,44,91,123,34,112,108,97,99,101,34,58,34,79,43,71,54,119,112,74,108,34,44,34,116,105,109,101,34,58,48,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,52,54,56,55,52,49,56,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,53,56,48,54,54,56,52,54,56,53,54,49,50,49,49,51,52,49,50,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,66,111,114,105,115,34,44,34,109,101,115,115,97,103,101,34,58,34,72,101,121,34,125,125,93,44,91,123,34,112,108,97,99,101,34,58,34,54,52,76,102,101,52,106,67,34,44,34,116,105,109,101,34,58,48,125,44,123,34,116,105,109,101,115,116,97,109,112,34,58,123,34,116,105,109,101,34,58,49,55,49,50,50,52,53,50,50,48,50,57,57,44,34,99,97,117,115,97,108,34,58,48,44,34,114,97,110,100,111,109,34,58,56,55,50,53,51,55,50,54,50,49,56,51,48,57,50,51,54,53,125,44,34,112,97,121,108,111,97,100,34,58,123,34,97,117,116,104,111,114,34,58,34,66,111,114,105,115,34,44,34,109,101,115,115,97,103,101,34,58,34,109,111,105,110,34,125,125,93,93,125,44,34,99,111,110,116,101,120,116,34,58,123,34,105,110,116,101,114,110,97,108,34,58,91,91,34,79,43,71,54,119,112,74,108,34,44,123,34,105,110,110,101,114,34,58,91,48,44,50,44,48,44,48,93,44,34,117,115,101,100,34,58,50,125,93,44,91,34,77,55,90,79,71,121,98,67,34,44,123,34,105,110,110,101,114,34,58,91,48,44,49,93,44,34,117,115,101,100,34,58,50,125,93,44,91,34,89,113,73,77,78,112,80,84,34,44,123,34,105,110,110,101,114,34,58,91,48,44,49,44,48,44,48,93,44,34,117,115,101,100,34,58,50,125,93,44,91,34,54,52,76,102,101,52,106,67,34,44,123,34,105,110,110,101,114,34,58,91,48,44,50,44,48,44,48,93,44,34,117,115,101,100,34,58,50,125,93,44,91,34,48,105,107,57,110,66,78,116,34,44,123,34,105,110,110,101,114,34,58,91,48,44,49,44,48,44,48,93,44,34,117,115,101,100,34,58,50,125,93,93,125,125,125]]]}
*/
  case IncomingBundleWithoutPreviousNode(bid: String, node_name: String)
  case EncounteredPeer(name: String, eid: Endpoint, peer: DtnPeer)
  case DroppedPeer(name: String, eid: Endpoint)
  case PeerState(peers: Map[String, DtnPeer])
  case ServiceState(services: Map[Int, String])

  // packets sent from client
  case AddService(tag: Int, service: String)
  case ResponseSenderForBundle(bp: BundlePack, clas: List[Sender], delete_afterwards: Boolean)




given Encoder[PeerAddress] = Encoder { (writer, peerAddress) =>
  writer.writeMapOpen(1)

  peerAddress match
    case PeerAddress.Ip(address) => writer.writeMapMember("Ip", address)
    case PeerAddress.BroadcastGeneric(domain, address) => writer.writeMapMember("BroadcastGeneric", (domain, address))
    case PeerAddress.Generic(addr) => writer.writeMapMember("Generic", addr)
  
  writer.writeMapClose()
}

given Decoder[PeerAddress] = Decoder { reader =>
  val unbounded = reader.readMapOpen(1)

  var peerAddress: PeerAddress = null;

  reader.readString() match
    case "Ip" => peerAddress = PeerAddress.Ip(reader.readString())
    case "BroadcastGeneric" => {
      val arr_unbounded = reader.readArrayOpen(2)
      peerAddress = PeerAddress.BroadcastGeneric(reader.readString(), reader.readString())
      reader.readArrayClose(arr_unbounded, peerAddress)
    }
    case "Generic" => peerAddress = PeerAddress.Generic(reader.readString())
    case s: Any => throw Exception(s"unknown PeerAddress type: $s")
  
  reader.readMapClose(unbounded, peerAddress)
}
