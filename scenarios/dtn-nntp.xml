<?xml version='1.0' encoding='UTF-8'?>
<scenario name="/tmp/tmpy_v4o__p">
  <networks>
    <network id="3" name="AdHocWiFi" icon="" canvas="0" type="WIRELESS_LAN">
      <position x="406.0" y="160.0" lat="47.57819683967949" lon="-122.12867705869644" alt="2.0"/>
    </network>
  </networks>
  <devices>
    <device id="2" name="bob" icon="" canvas="0" type="DTN" class="" image="">
      <position x="548.0" y="590.0" lat="47.575591024149794" lon="-122.127401450993" alt="2.0"/>
      <services>
        <service name="UserDefined"/>
        <service name="DefaultMulticastRoute"/>
        <service name="dtnd"/>
        <service name="MonntpyService"/>
        <service name="dtnecho"/>
      </services>
    </device>
    <device id="4" name="gateway" icon="" canvas="0" type="DTN" class="" image="">
      <position x="404.0" y="314.0" lat="47.57726360902315" lon="-122.12869502500213" alt="2.0"/>
      <services>
        <service name="DefaultRoute"/>
        <service name="dtnmonitoring"/>
        <service name="DefaultMulticastRoute"/>
        <service name="dtnd"/>
        <service name="MonntpyService"/>
        <service name="MonntpyMonitorService"/>
      </services>
    </device>
    <device id="1" name="anna" icon="" canvas="0" type="DTN" class="" image="">
      <position x="239.0" y="593.0" lat="47.5755728435859" lon="-122.13017724522095" alt="2.0"/>
      <services>
        <service name="UserDefined"/>
        <service name="DefaultMulticastRoute"/>
        <service name="dtnd"/>
        <service name="MonntpyService"/>
        <service name="dtnecho"/>
      </services>
    </device>
    <device id="5" name="relay1" icon="" canvas="0" type="DTN" class="" image="">
      <position x="401.0" y="454.0" lat="47.57641520308326" lon="-122.12872197446065" alt="2.0"/>
      <services>
        <service name="DefaultMulticastRoute"/>
        <service name="dtnd"/>
        <service name="dtnecho"/>
      </services>
    </device>
  </devices>
  <links>
    <link node1="3" node2="1">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:00" ip4="10.0.0.20" ip4_mask="24" ip6="2001::14" ip6_mask="128"/>
    </link>
    <link node1="3" node2="5">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:03" ip4="10.0.0.50" ip4_mask="24" ip6="2001::17" ip6_mask="128"/>
    </link>
    <link node1="3" node2="2">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:01" ip4="10.0.0.21" ip4_mask="24" ip6="2001::15" ip6_mask="128"/>
    </link>
    <link node1="3" node2="4">
      <iface2 id="0" name="eth0" mac="00:00:00:aa:00:02" ip4="10.0.0.100" ip4_mask="24" ip6="2001::16" ip6_mask="128"/>
    </link>
  </links>
  <mobility_configurations>
    <mobility_configuration node="3" model="basic_range">
      <configuration name="range" value="250"/>
      <configuration name="bandwidth" value="54000000"/>
      <configuration name="jitter" value="0"/>
      <configuration name="delay" value="5000"/>
      <configuration name="error" value="0"/>
      <configuration name="promiscuous" value="0"/>
    </mobility_configuration>
  </mobility_configurations>
  <emane_global_configuration>
    <emulator/>
    <core>
      <configuration name="platform_id_start" value="1"/>
      <configuration name="nem_id_start" value="1"/>
      <configuration name="link_enabled" value="1"/>
      <configuration name="loss_threshold" value="30"/>
      <configuration name="link_interval" value="1"/>
      <configuration name="link_timeout" value="4"/>
    </core>
  </emane_global_configuration>
  <service_configurations>
    <service name="UserDefined" node="2">
      <startups>
        <startup>bash -c "sleep 2 &amp;&amp; export DISPLAY=:1.0 &amp;&amp; pan &amp;"</startup>
      </startups>
    </service>
    <service name="MonntpyService" node="2">
      <startups>
        <startup>bash start-monntpy.sh</startup>
      </startups>
      <files>
        <file name="start-monntpy.sh"><![CDATA[#!/bin/bash

cur=$(pwd)
cd /app/moNNT.py
cp -v db.sqlite3 "$cur/" >> "$cur/dtnnntp-refresher.log"

# refresh timestamps to keep articles away from janitor cleanup
export DB_PATH="$cur/db.sqlite3"
/app/dtnnntp-refresher.py >> "$cur/dtnnntp-refresher.log"

export SENDER_EMAIL=bob@monntpy.net
poetry run ./main.py &> "$cur/monntpy.log"


]]></file>
      </files>
    </service>
    <service name="SSH" node="4">
      <directories>
        <directory>/etc/ssh</directory>
        <directory>/var/run/sshd</directory>
      </directories>
      <startups>
        <startup>bash startsshd.sh</startup>
      </startups>
      <shutdowns>
        <shutdown>killall sshd</shutdown>
      </shutdowns>
      <files>
        <file name="startsshd.sh"><![CDATA[#!/bin/sh
# auto-generated by SSH service (utility.py)
ssh-keygen -q -t rsa -N "" -f /etc/ssh/ssh_host_rsa_key
chmod 655 /var/run/sshd
# wait until RSA host key has been generated to launch sshd
/usr/sbin/sshd -f /etc/ssh/sshd_config
touch /etc/ssh/authorized_keys
chmod 600 /etc/ssh/authorized_keys
cat /home/joe/.ssh/id_rsa.pub >> /etc/ssh/authorized_keys

]]></file>
      </files>
    </service>
    <service name="UserDefined" node="4">
      <startups>
        <startup>bash peeklog.sh</startup>
      </startups>
      <files>
        <file name="peeklog.sh"><![CDATA[#!/bin/bash
export DISPLAY=:1.0
sleep 1
xterm -rv -title 'moNNT.py Log Tail' -e tail -f "$SESSION_DIR/$(hostname).conf/monntpy.log"
]]></file>
      </files>
    </service>
    <service name="MonntpyService" node="4">
      <startups>
        <startup>bash start-monntpy.sh</startup>
      </startups>
      <files>
        <file name="start-monntpy.sh"><![CDATA[#!/bin/bash

cur=$(pwd)
cd /app/moNNT.py
cp -v db.sqlite3 "$cur/" >> "$cur/dtnnntp-refresher.log"

# refresh timestamps to keep articles away from janitor cleanup
export DB_PATH="$cur/db.sqlite3"
/app/dtnnntp-refresher.py >> "$cur/dtnnntp-refresher.log"

export SENDER_EMAIL=gateway@monntpy.net
poetry run ./main.py &> "$cur/monntpy.log"

]]></file>
      </files>
    </service>
    <service name="UserDefined" node="1">
      <startups>
        <startup>bash -c "sleep 2 &amp;&amp; thunderbird --display=:1.0"</startup>
      </startups>
    </service>
    <service name="MonntpyService" node="1">
      <startups>
        <startup>bash start-monntpy.sh</startup>
      </startups>
      <files>
        <file name="start-monntpy.sh"><![CDATA[#!/bin/bash

cur=$(pwd)
cd /app/moNNT.py
cp -v db.sqlite3 "$cur/" >> "$cur/dtnnntp-refresher.log"

# refresh timestamps to keep articles away from janitor cleanup
export DB_PATH="$cur/db.sqlite3"
/app/dtnnntp-refresher.py >> "$cur/dtnnntp-refresher.log"

export SENDER_EMAIL=anna@monntpy.net
poetry run ./main.py &> "$cur/monntpy.log"


]]></file>
      </files>
    </service>
  </service_configurations>
  <session_origin lat="47.579166412353516" lon="-122.13232421875" alt="2.0" scale="100.0"/>
  <session_hooks>
    <hook name="config_hook.sh" state="2">#!/bin/bash
# session hook script; write commands here to execute on the host at the
# specified state

# first backup everything
echo $(cat /proc/sys/net/ipv4/ip_forward) &gt; /root/ipv4forward
iptables-save &gt; /root/ipv4tables

# install all required routes
echo 1 &gt; /proc/sys/net/ipv4/ip_forward
# iptables -F
# iptables -t nat -F
# iptables -X
iptables -t nat -A PREROUTING -p tcp --dport 1190 -j DNAT --to-destination 192.168.133.4:1190
iptables -t nat -A POSTROUTING -p tcp -d 192.168.133.4 --dport 1190 -j SNAT --to-source 192.168.133.254</hook>
    <hook name="shutdown_hook.sh" state="6">#!/bin/sh
# session hook script; write commands here to execute on the host at the
# specified state

# flush and delete
iptables -F
iptables -t nat -F
iptables -X

# restore everything
cat /root/ipv4forward &gt; /proc/sys/net/ipv4/ip_forward
iptables-restore &lt; /root/ipv4tables</hook>
  </session_hooks>
  <session_options>
    <configuration name="controlnet" value="192.168.133.0/24"/>
    <configuration name="controlnet0" value=""/>
    <configuration name="controlnet1" value=""/>
    <configuration name="controlnet2" value=""/>
    <configuration name="controlnet3" value=""/>
    <configuration name="controlnet_updown_script" value=""/>
    <configuration name="enablerj45" value="1"/>
    <configuration name="preservedir" value="0"/>
    <configuration name="enablesdt" value="0"/>
    <configuration name="sdturl" value="tcp://127.0.0.1:50000/"/>
    <configuration name="ovs" value="0"/>
  </session_options>
  <session_metadata>
    <configuration name="canvas" value="{&quot;gridlines&quot;: false, &quot;dimensions&quot;: [2000, 2000], &quot;canvases&quot;: [{&quot;id&quot;: 1, &quot;wallpaper&quot;: null, &quot;wallpaper_style&quot;: 1, &quot;fit_image&quot;: false}]}"/>
    <configuration name="edges" value="[]"/>
    <configuration name="shapes" value="[{&quot;canvas&quot;: 1, &quot;type&quot;: &quot;text&quot;, &quot;iconcoords&quot;: [402.99999999999994, 67.0], &quot;label&quot;: &quot;DTN Newsgroup Communication&quot;, &quot;fontfamily&quot;: &quot;Arial&quot;, &quot;fontsize&quot;: 28, &quot;labelcolor&quot;: &quot;#000000&quot;, &quot;color&quot;: &quot;&quot;, &quot;border&quot;: &quot;#000000&quot;, &quot;width&quot;: 1, &quot;bold&quot;: false, &quot;italic&quot;: false, &quot;underline&quot;: false}]"/>
    <configuration name="hidden" value="[]"/>
  </session_metadata>
  <default_services>
    <node type="mdr">
      <service name="zebra"/>
      <service name="OSPFv3MDR"/>
      <service name="IPForward"/>
    </node>
    <node type="PC">
      <service name="DefaultRoute"/>
    </node>
    <node type="prouter"/>
    <node type="router">
      <service name="zebra"/>
      <service name="OSPFv2"/>
      <service name="OSPFv3"/>
      <service name="IPForward"/>
    </node>
    <node type="host">
      <service name="DefaultRoute"/>
      <service name="SSH"/>
    </node>
  </default_services>
</scenario>
